📝 Python List – Complete Revision Notes
🔹 1. Definition

A list is an ordered, mutable (changeable) collection of items in Python.
👉 Example: [10, "apple", 3.14, True]

🔹 2. Creating a List

Definition: Lists are created using square brackets [].
👉 Examples:

Empty list → []

Numbers → [1, 2, 3, 4]

Strings → ["apple", "banana"]

Mixed → [1, "hi", 3.5, False]

Nested → [[1,2,3], [4,5,6]]

🔹 3. Accessing Elements

Definition: Elements are accessed using indexes (start from 0).
👉 Examples:

Positive index → fruits[0] = "apple"

Negative index → fruits[-1] = "mango"

Slice → fruits[1:3] = ['banana','cherry']

🔹 4. Updating Elements

Definition: Lists are mutable, so values can be changed.
👉 Example: fruits[1] = "orange"

🔹 5. Adding Elements

Definition: Python provides methods to insert new values.
👉 Examples:

append(x) → Add at end → ["apple"] → ["apple","mango"]

insert(i,x) → Add at index → ["apple","banana"] → ["apple","orange","banana"]

extend(list) → Add multiple → ["apple"] → ["apple","kiwi","grape"]

🔹 6. Removing Elements

Definition: Elements can be deleted by value, index, or clearing the list.
👉 Examples:

remove("apple") → deletes first "apple"

pop(2) → removes item at index 2

pop() → removes last item

clear() → empties the list

🔹 7. Searching in List

Definition: Methods to find values and count occurrences.
👉 Examples:

index("banana") → gives index

count("apple") → number of occurrences

🔹 8. Sorting & Reversing

Definition: Lists can be sorted and reversed.
👉 Examples:

sort() → ascending → [1,2,3,4]

sort(reverse=True) → descending → [4,3,2,1]

reverse() → reverses order

🔹 9. Copying a List

Definition: Copy creates a new list with same values.
👉 Example:

a = [1,2,3]

b = a.copy() → b = [1,2,3]

🔹 10. Built-in Functions

Definition: Python has built-in functions to work on lists.
👉 Examples:

len([1,2,3]) = 3 (length)

max([4,9,2]) = 9 (maximum)

min([4,9,2]) = 2 (minimum)

sum([1,2,3]) = 6 (total)

any([0,False,5]) = True (any True)

all([1,2,3]) = True (all True)

🔹 11. Slicing

Definition: Extracting part of a list using [start:end:step].
👉 Examples:

nums[1:4] = [20,30,40]

nums[:3] = [10,20,30]

nums[2:] = [30,40,50]

nums[::-1] = reverse list

nums[::2] = every 2nd element

🔹 12. Nested Lists

Definition: A list inside another list (matrix style).
👉 Example:
matrix = [[1,2,3],[4,5,6]]

matrix[0] = [1,2,3]

matrix[1][2] = 6

🔹 13. List Comprehension

Definition: Short way to create new lists from existing data.
👉 Examples:

Squares → [x**2 for x in [1,2,3]] = [1,4,9]

Evens → [x for x in [1,2,3,4] if x%2==0] = [2,4]

🔹 14. Converting Other Types to List

Definition: Convert strings/tuples to list using list().
👉 Example:

list("hello") = ['h','e','l','l','o']

🔹 15. Removing Duplicates

Definition: Convert list to set and back to remove duplicates.
👉 Example:

list(set([1,2,2,3,4,4])) = [1,2,3,4]